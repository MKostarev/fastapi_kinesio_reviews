from sqlalchemy.orm import Session
from app import models
from app.services.notification_service import NotificationService

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Rutube API
MOCK_VIDEOS_DATA = [
    {
        "video_id": "12345",
        "title": "–û—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥—É–∫—Ç–µ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!",
        "url": "https://rutube.ru/video/12345/",
        "views": 1000
    },
    {
        "video_id": "67890",
        "title": "–û–±–∑–æ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞",
        "url": "https://rutube.ru/video/67890/",
        "views": 500
    },
    {
        "video_id": "11111",
        "title": "–ú–æ–π —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –º–µ—Å—è—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "url": "https://rutube.ru/video/11111/",
        "views": 1500
    },
    {
        "video_id": "99999",
        "title": "–ü—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ",
        "url": "https://rutube.ru/video/99999/",
        "views": 2000
    }
]


def get_all_channel_videos():
    """–ó–∞–≥–ª—É—à–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API Rutube"""
    print("üîß –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Rutube")
    return MOCK_VIDEOS_DATA


def filter_reviews(videos_data):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–∏–¥–µ–æ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ title)"""
    keywords = ["–æ—Ç–∑—ã–≤", "–æ—Ç–∑—ã–≤—ã", "–æ—Ç–∑—ã–≤—É"]
    reviews = []

    for video in videos_data:
        title_lower = video["title"].lower()
        if any(keyword in title_lower for keyword in keywords):
            reviews.append(video)

    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ {len(videos_data)} –≤–∏–¥–µ–æ")
    return reviews


def update_db_with_reviews(db: Session, reviews_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏"""
    new_count = 0
    updated_count = 0
    new_ids = []

    for review in reviews_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤ –ë–î
        db_review = db.query(models.VideoReview).filter(
            models.VideoReview.source_id == review["video_id"]
        ).first()

        if db_review:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            if db_review.title != review["title"] or db_review.url != review["url"]:
                db_review.title = review["title"]
                db_review.url = review["url"]
                updated_count += 1
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_review = models.VideoReview(
                source_id=review["video_id"],
                title=review["title"],
                url=review["url"]
            )
            db.add(new_review)
            new_count += 1
            new_ids.append(review["video_id"])

    db.commit()

    results = {
        "new": new_count,
        "updated": updated_count,
        "total": new_count + updated_count,
        "new_ids": new_ids
    }

    print(f"üíæ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_count} –Ω–æ–≤—ã—Ö, {updated_count} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    return results