from fastapi import APIRouter, Depends, BackgroundTasks
from sqlalchemy.orm import Session
from app.database import get_db
from app import models, schemas
from app.services import rutube_service
from app.services.notification_service import NotificationService

# –£–±–µ–¥–∏—Å—å, —á—Ç–æ router —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!
router = APIRouter(prefix="/api/v1", tags=["reviews"])


@router.get("/reviews/", response_model=schemas.ReviewsResponse)
def get_reviews(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    reviews = db.query(models.VideoReview).all()
    return {"reviews": reviews, "total": len(reviews)}


@router.post("/sync/force/", response_model=schemas.TaskStartedResponse)
def force_sync(background_tasks: BackgroundTasks, db: Session = Depends(get_db)):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (—Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)"""
    background_tasks.add_task(perform_sync, db, "manual")
    return {"message": "–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞", "task": "full_sync"}


def perform_sync(db: Session):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞ –º–æ–∫–æ–≤—ã–µ)
    videos_data = rutube_service.get_all_channel_videos()

    # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = rutube_service.filter_reviews(videos_data)

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    rutube_service.update_db_with_reviews(db, reviews)

    print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def perform_sync(db: Session, source: str = "manual"):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞ –º–æ–∫–æ–≤—ã–µ)
        videos_data = rutube_service.get_all_channel_videos()

        # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
        reviews = rutube_service.filter_reviews(videos_data)

        if not reviews:
            print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            NotificationService.no_new_data_notification(source)
            return

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        results = rutube_service.update_db_with_reviews(db, reviews)

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        NotificationService.sync_completed_notification(results, source)

        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        NotificationService.sync_failed_notification(error_msg, source)
        raise e